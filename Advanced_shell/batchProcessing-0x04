#!/bin/bash

# File: batchProcessing-0x04
# Description: Batch process Pokémon data retrieval using parallel processing.

# API URL
API_URL="https://pokeapi.co/api/v2/pokemon"

# List of Pokémon
POKEMON_LIST=("Bulbasaur" "Ivysaur" "Venusaur" "Charmander" "Charmeleon")

# Directory to save JSON files
OUTPUT_DIR="./pokemon_data"

# Ensure the output directory exists
mkdir -p "$OUTPUT_DIR"

# Clear previous error log
> error_log.txt

# Function to retrieve Pokémon data
fetch_pokemon_data() {
  local pokemon_name="$1"
  local retries=0
  local max_retries=3

  while [[ $retries -lt $max_retries ]]; do
    echo "Fetching data for $pokemon_name (Attempt $((retries + 1))/$max_retries)..."
    response=$(curl -s -w "%{http_code}" -o "$OUTPUT_DIR/${pokemon_name,,}.json" "$API_URL/${pokemon_name,,}")
    status_code=${response: -3}

    if [[ $status_code -eq 200 ]]; then
      echo "Data for $pokemon_name saved successfully."
      return 0
    else
      echo "Error fetching $pokemon_name: HTTP $status_code. Retrying..."
      retries=$((retries + 1))
      sleep 2  # Delay before retry
    fi
  done

  echo "Failed to fetch data for $pokemon_name after $max_retries attempts. Logging error."
  echo "$pokemon_name" >> error_log.txt
  return 1
}

# Loop through each Pokémon in parallel
for pokemon in "${POKEMON_LIST[@]}"; do
  fetch_pokemon_data "$pokemon" &
done

# Wait for all background processes to complete
wait

# Completion message
echo "Batch processing completed. Errors logged to error_log.txt if any."

import requests
import multiprocessing

# List of Pokémon IDs to fetch data for (example list)
pokemon_ids = [1, 2, 3, 4, 5]

# Function to fetch data for each Pokémon
def fetch_pokemon_data(pokemon_id):
    url = f"https://pokeapi.co/api/v2/pokemon/{pokemon_id}"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        return None

# Function to handle the processing and result collection
def process_pokemon_data(pokemon_id, result_queue):
    data = fetch_pokemon_data(pokemon_id)
    result_queue.put((pokemon_id, data))

def main():
    # Queue to collect results
    result_queue = multiprocessing.Queue()

    # List to hold process references
    processes = []

    # Create processes for each Pokémon
    for pokemon_id in pokemon_ids:
        process = multiprocessing.Process(target=process_pokemon_data, args=(pokemon_id, result_queue))
        processes.append(process)
        process.start()

    # Ensure all processes are completed
    for process in processes:
        process.join()

    # Collect all results
    results = {}
    while not result_queue.empty():
        pokemon_id, data = result_queue.get()
        results[pokemon_id] = data

    # Do something with the results
    print("Fetched data for Pokémon:", results)

if __name__ == "__main__":
    main()

