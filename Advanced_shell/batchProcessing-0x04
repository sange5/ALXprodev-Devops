import requests
import multiprocessing
import time

# List of Pokémon IDs to fetch data for (you can modify this list with actual Pokémon IDs)
pokemon_ids = [1, 2, 3, 4, 5]  # Example Pokémon IDs: Bulbasaur, Ivysaur, Venusaur, Charmander, Charmeleon

# Function to fetch data for a given Pokémon
def fetch_pokemon_data(pokemon_id):
    url = f"https://pokeapi.co/api/v2/pokemon/{pokemon_id}"
    try:
        response = requests.get(url)
        response.raise_for_status()  # Raise an exception for bad status codes
        return response.json()
    except requests.RequestException as e:
        return {"error": str(e), "pokemon_id": pokemon_id}

# Function to handle the process of fetching and storing data
def process_pokemon_data(pokemon_id, result_queue):
    print(f"Fetching data for Pokémon ID: {pokemon_id}")
    data = fetch_pokemon_data(pokemon_id)
    result_queue.put((pokemon_id, data))  # Put result into the queue

def main():
    start_time = time.time()

    # Queue to collect results from background processes
    result_queue = multiprocessing.Queue()

    # List to store references to processes
    processes = []

    # Start a process for each Pokémon
    for pokemon_id in pokemon_ids:
        process = multiprocessing.Process(target=process_pokemon_data, args=(pokemon_id, result_queue))
        processes.append(process)
        process.start()

    # Ensure all processes are completed before moving to the next step
    for process in processes:
        process.join()

    # Collect and print all results
    results = {}
    while not result_queue.empty():
        pokemon_id, data = result_queue.get()
        results[pokemon_id] = data

    # Print the fetched data for all Pokémon
    for pokemon_id, data in results.items():
        print(f"Data for Pokémon ID {pokemon_id}: {data}")

    # Print the time taken to fetch the data
    print(f"\nTime taken to fetch data: {time.time() - start_time:.2f} seconds")

if __name__ == "__main__":
    main()
